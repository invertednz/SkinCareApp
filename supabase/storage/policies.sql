-- Storage bucket and RLS policies for user photos
-- Bucket: user-photos (private)

-- Create bucket if it does not exist
insert into storage.buckets (id, name, public)
values ('user-photos', 'user-photos', false)
on conflict (id) do nothing;

-- Restrict access to owners only by folder convention: user_id/yyyy/mm/dd/uuid.jpg
-- Policies scoped to bucket 'user-photos'

-- Allow owners to insert into their own folder
drop policy if exists "photos_insert_own" on storage.objects;
create policy "photos_insert_own"
  on storage.objects for insert to authenticated
  with check (
    bucket_id = 'user-photos'
    and (name like auth.uid()::text || '/%')
  );

-- Allow owners to read their own photos
drop policy if exists "photos_read_own" on storage.objects;
create policy "photos_read_own"
  on storage.objects for select to authenticated
  using (
    bucket_id = 'user-photos'
    and (name like auth.uid()::text || '/%')
  );

-- Allow owners to update (e.g., metadata) for their own photos
drop policy if exists "photos_update_own" on storage.objects;
create policy "photos_update_own"
  on storage.objects for update to authenticated
  using (
    bucket_id = 'user-photos'
    and (name like auth.uid()::text || '/%')
  );

-- Allow owners to delete their own photos
drop policy if exists "photos_delete_own" on storage.objects;
create policy "photos_delete_own"
  on storage.objects for delete to authenticated
  using (
    bucket_id = 'user-photos'
    and (name like auth.uid()::text || '/%')
  );

-- Notes on signed URLs:
-- Signed URL downloads do not require these SELECT permissions; access is granted
-- via the signed token generated by the server/client API. Keep bucket private and
-- use signed URLs for sharing and server-side analysis access.
